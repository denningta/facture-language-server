"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.FactureAstReflection = exports.isStep = exports.Step = exports.isSpecification = exports.Specification = exports.isSection = exports.Section = exports.isProcedure = exports.Procedure = exports.isPlainText = exports.PlainText = exports.isModel = exports.Model = exports.isMarkdown = exports.Markdown = exports.isHeading1 = exports.Heading1 = exports.isBold = exports.Bold = exports.isStepElement = exports.StepElement = exports.isSectionElement = exports.SectionElement = exports.isProcedureElement = exports.ProcedureElement = exports.isDocumentElement = exports.DocumentElement = exports.isAbstractMarkdownInlineElement = exports.AbstractMarkdownInlineElement = exports.isAbstractMarkdownElement = exports.AbstractMarkdownElement = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.AbstractMarkdownElement = 'AbstractMarkdownElement';
function isAbstractMarkdownElement(item) {
    return exports.reflection.isInstance(item, exports.AbstractMarkdownElement);
}
exports.isAbstractMarkdownElement = isAbstractMarkdownElement;
exports.AbstractMarkdownInlineElement = 'AbstractMarkdownInlineElement';
function isAbstractMarkdownInlineElement(item) {
    return exports.reflection.isInstance(item, exports.AbstractMarkdownInlineElement);
}
exports.isAbstractMarkdownInlineElement = isAbstractMarkdownInlineElement;
exports.DocumentElement = 'DocumentElement';
function isDocumentElement(item) {
    return exports.reflection.isInstance(item, exports.DocumentElement);
}
exports.isDocumentElement = isDocumentElement;
exports.ProcedureElement = 'ProcedureElement';
function isProcedureElement(item) {
    return exports.reflection.isInstance(item, exports.ProcedureElement);
}
exports.isProcedureElement = isProcedureElement;
exports.SectionElement = 'SectionElement';
function isSectionElement(item) {
    return exports.reflection.isInstance(item, exports.SectionElement);
}
exports.isSectionElement = isSectionElement;
exports.StepElement = 'StepElement';
function isStepElement(item) {
    return exports.reflection.isInstance(item, exports.StepElement);
}
exports.isStepElement = isStepElement;
exports.Bold = 'Bold';
function isBold(item) {
    return exports.reflection.isInstance(item, exports.Bold);
}
exports.isBold = isBold;
exports.Heading1 = 'Heading1';
function isHeading1(item) {
    return exports.reflection.isInstance(item, exports.Heading1);
}
exports.isHeading1 = isHeading1;
exports.Markdown = 'Markdown';
function isMarkdown(item) {
    return exports.reflection.isInstance(item, exports.Markdown);
}
exports.isMarkdown = isMarkdown;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.PlainText = 'PlainText';
function isPlainText(item) {
    return exports.reflection.isInstance(item, exports.PlainText);
}
exports.isPlainText = isPlainText;
exports.Procedure = 'Procedure';
function isProcedure(item) {
    return exports.reflection.isInstance(item, exports.Procedure);
}
exports.isProcedure = isProcedure;
exports.Section = 'Section';
function isSection(item) {
    return exports.reflection.isInstance(item, exports.Section);
}
exports.isSection = isSection;
exports.Specification = 'Specification';
function isSpecification(item) {
    return exports.reflection.isInstance(item, exports.Specification);
}
exports.isSpecification = isSpecification;
exports.Step = 'Step';
function isStep(item) {
    return exports.reflection.isInstance(item, exports.Step);
}
exports.isStep = isStep;
class FactureAstReflection {
    getAllTypes() {
        return ['AbstractMarkdownElement', 'AbstractMarkdownInlineElement', 'Bold', 'DocumentElement', 'Heading1', 'Markdown', 'Model', 'PlainText', 'Procedure', 'ProcedureElement', 'Section', 'SectionElement', 'Specification', 'Step', 'StepElement'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case exports.Bold: {
                return this.isSubtype(exports.AbstractMarkdownInlineElement, supertype);
            }
            case exports.Heading1:
            case exports.PlainText: {
                return this.isSubtype(exports.AbstractMarkdownElement, supertype);
            }
            case exports.Markdown: {
                return this.isSubtype(exports.SectionElement, supertype);
            }
            case exports.Procedure:
            case exports.Section: {
                return this.isSubtype(exports.DocumentElement, supertype) || this.isSubtype(exports.SectionElement, supertype);
            }
            case exports.Step: {
                return this.isSubtype(exports.SectionElement, supertype) || this.isSubtype(exports.ProcedureElement, supertype) || this.isSubtype(exports.StepElement, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(referenceId) {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Bold': {
                return {
                    name: 'Bold',
                    mandatory: [
                        { name: 'value', type: 'array' }
                    ]
                };
            }
            case 'Markdown': {
                return {
                    name: 'Markdown',
                    mandatory: [
                        { name: 'content', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'PlainText': {
                return {
                    name: 'PlainText',
                    mandatory: [
                        { name: 'text', type: 'array' }
                    ]
                };
            }
            case 'Procedure': {
                return {
                    name: 'Procedure',
                    mandatory: [
                        { name: 'content', type: 'array' }
                    ]
                };
            }
            case 'Section': {
                return {
                    name: 'Section',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'Step': {
                return {
                    name: 'Step',
                    mandatory: [
                        { name: 'content', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.FactureAstReflection = FactureAstReflection;
exports.reflection = new FactureAstReflection();
//# sourceMappingURL=ast.js.map